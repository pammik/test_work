import json
import time
import paramiko
import base64
import getpass
import os.path


file = "devices"
myfile = open(file, mode='r', encoding='utf-8')
act_user = {}
all = {}
def_acc = getpass.getuser()
con_serv = paramiko.client.SSHClient()
con_serv.set_missing_host_key_policy(paramiko.client.AutoAddPolicy())
chck_file = os.path.exists("/home/" + str(def_acc) + "/.ssh/id_rsa")

for line in myfile:
    line = line.replace('[', ' ').replace(']', ' ').replace('"', '\"')
    line = line.strip('\n')
    if line != ' ':
        act_user = json.loads(line)
        if chck_file:
            act_user.update({"auth_type": "key"})
            key = paramiko.RSAKey.from_private_key_file("/home/" + str(def_acc) + "/.ssh/id_rsa")
            con_serv.connect(hostname=act_user["hostname"], username=act_user["user"], pkey=key)
            stdin_, stdout_, stderr_ = con_serv.exec_command("cd /bw/test_work && git ver-parse --abbrev-ref HEAD")
            stdout_.channel.recv_exit_status()
            lines = stdout_.readlines()[0].rstrip()
            if lines != "":
                act_user.update({"vcs_type": "git"})
                act_user.update({"branch": lines})
                stdin_, stdout_, stderr_ = con_serv.exec_command("cd bw/test_work && git rev-list --count HEAD")
                stdout_.channel.recv_exit_status()
                lines = stdout_.readlines()[0].rstrip()
                act_user.update({"revision": lines})
            else:
                act_user.update({"vcs_type": "svn"})
                stdin_, stdout_, stderr_ = con_serv.exec_command("cd bw/test_work/ && svn info --show-item url")
                stdout_.channel.recv_exit_status()
                lines = stdout_.readlines()[0].rstrip()
                act_user.update({"branch": lines})
                stdin_, stdout_, stderr_ = con_serv.exec_command("cd bw/test_work && svn info --show-item revision")
                stdout_.channel.recv_exit_status()
                lines = stdout_.readlines()[0].rstrip()
                act_user.update({"revision": lines})
            con_serv.close()
        else:
            act_user.update({"auth_type": "password"})
            con_serv.connect(hostname=act_user["hostname"], username=act_user["user"], password=act_user["user"])
            stdin_, stdout_, stderr_ = con_serv.exec_command("cd bw/test_work/ && git rev-parse --abbrev-ref HEAD")
            stdout_.channel.recv_exit_status()
            lines = stdout_.readlines()[0].rstrip()
            if lines != "":
                act_user.update({"vcs_type": "git"})
                act_user.update({"branch": lines})
                stdin_, stdout_, stderr_ = con_serv.exec_command("cd bw/test_work && git rev-list --count HEAD")
                stdout_.channel.recv_exit_status()
                lines = stdout_.readlines()[0].rstrip()
                act_user.update({"revision": lines})
            else:
                act_user.update({"vcs_type": "svn"})
                stdin_, stdout_, stderr_ = con_serv.exec_command("cd bw/test_work/ && svn info --show-item url")
                stdout_.channel.recv_exit_status()
                lines = stdout_.readlines()[0].rstrip()
                act_user.update({"branch": lines})
                stdin_, stdout_, stderr_ = con_serv.exec_command("cd bw/test_work && svn info --show-item revision")
                stdout_.channel.recv_exit_status()
                lines = stdout_.readlines()[0].rstrip()
                act_user.update({"revision": lines})
            con_serv.close()
        print(act_user)
        all.update({act_user["user"]: act_user})
output_to_json = open("json_out", mode='w', encoding='utf-8')

json.dump(all, output_to_json)
